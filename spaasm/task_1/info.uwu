9. Vypísať obsah vstupu, pričom ak sa v ňom nachádza viacero rovnakých
riadkov za sebou, vypíše sa vždy len jeden krát


Časť 2: 5 bodov + max. 3 body bonus
Každý si môže zvoliť ľubovoľnú kombináciu nasledujúcich úloh podľa toho, koľko
bodov by chcel získať. Z tejto skupiny sa nad 5 bodov započítajú úlohy naviac za
ďalšie 3 body (bonus).
1. Plus 1 bod: Po zadaní prepínača '-p' bude výstup stránkovaný, teda po
zaplnení obrazovky sa počká na stlačenie klávesu.
2. Plus 2 body: Stránkovanie oboma smermi, teda aj naspäť.
3. Plus 2 body: Pri stránkovaní sa zobrazí poradové číslo aktuálne zobrazenej
strany, tiež celkový počet strán a časť už zobrazeného výstupu v percentách.
4. Plus 1 bod: Pri stránkovaní sa vždy zobrazí aj aktuálny dátum a čas.
5. Plus 1 bod: Pri stránkovaní sa vždy zobrazí aj absolútna cesta zobrazovaného
(spracovávaného) vstupného súboru. Ak je dlhšia než riadok, bude v
prostriedku vhodne skrátená.
6. Plus 1 bod: Pri stránkovanom výpise bude možné zvýrazniť reťazec zadaný z
klávesnice v práve zobrazenom texte.
7. Plus 1 bod: Ak budú korektne spracované vstupné súbory s veľkosťou nad 64
kB.
8. Plus 1 bod: Prepínač '-r' spôsobí výpis v opačnom poradí (od konca).
9. Plus 2 body: Ak bude možné zadať viacero vstupných súborov.
10. Plus 2 body je možné získať ak pridelená úloha bude realizovaná ako externá
procedúra (kompilovaná samostatne a prilinkovaná k výslednému programu).
11. Plus 1 bod je možné získať za (zmysluplné) použitie reťazcových inštrukcií
(MOVS, CMPS, STOS, atď.).
12. Plus 1 bod je možné získať za (dobré) komentáre, resp. dokumentáciu, v
anglickom jazyku.


General-Purpose Registers (GPRs)
Register	Purpose / Usage
rax	Accumulator: Used for return values of functions, multiplication/division, and system call numbers.
rbx	Base register: Typically used as a general-purpose register but preserved across function calls.
rcx	Counter register: Used for loops (e.g., loop instruction) and as an argument for certain instructions (e.g., rep movsb).
rdx	Data register: Used for I/O operations, storing function arguments, and as a secondary register for division/multiplication.
rsi	Source index: Typically used for string/memory operations (movsb, movsw, etc.) and as a function argument register.
rdi	Destination index: Used for string/memory operations and as a function argument register.
rsp	Stack pointer: Points to the top of the stack and is modified by function calls and stack operations (push / pop).
rbp	Base pointer: Used as a reference for function stack frames, but can be repurposed in modern calling conventions.
r8 – r15	Additional general-purpose registers (temporary): Used for passing extra function arguments or temporary storage.
Calling Convention (System V AMD64 ABI)

When calling functions in Linux x86-64, function arguments are passed in specific registers:
Argument #	Register
1st	rdi
2nd	rsi
3rd	rdx
4th	rcx
5th	r8
6th	r9
7th+	Passed on the stack

    Return values are stored in rax (or rdx:rax for larger values).
    Caller-saved (volatile) registers: rax, rcx, rdx, rsi, rdi, r8–r11 (can be changed by a function).
    Callee-saved (non-volatile) registers: rbx, rbp, r12–r15 (must be preserved across function calls).

Special-Purpose Registers

These registers have predefined roles in certain operations:
Register	Special Use
rip	Instruction pointer (points to the next instruction to execute).
rsp	Stack pointer (always points to the top of the stack).
rbp	Base pointer (used for stack frames, though not always necessary).
rflags	Status flags register (contains flags like Zero Flag, Carry Flag, etc.).
Segment Registers (Rarely Used in x86-64)

    cs (Code Segment)
    ds (Data Segment)
    ss (Stack Segment)
    es, fs, gs (Extra segments, sometimes used for thread-local storage)

Floating Point and SIMD Registers

For floating point and vectorized operations, you have:
Register	Purpose
xmm0 - xmm15	Used for floating-point operations (SSE/AVX).
ymm0 - ymm15	Used for AVX 256-bit operations.
zmm0 - zmm31	Used for AVX-512 operations.




gcc -S -masm=intel -O0 -fno-asynchronous-unwind-tables -fno-stack-protector -fno-exceptions -fomit-frame-pointer -fverbose-asm -fno-pic -no-pie main.c -o a.out

nasm -felf64 main.asm && ld main.o -o main && ./main

nasm -f elf64 main.asm -o main.o
gcc main.o -o main -no-pie  # Link with C library
./main


