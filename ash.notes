CAN YOU MAKE UNDERSTANDABLE FUCKING TASKS ????? WHY IS THIS SHIT SO INCOHERENT DIGSUTING BRAINDEAD AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA




TEAP, LS 2023/2024
(1) Máme dva algoritmy. Jeden testuje všetky permutácie sqrt(n) prvkov a druhý všetky podmnožiny n/2 prvkov. Jednotlivý test má zložitosť O(n). Platí, že prvý algoritmus je asymtoticky rýchlejší.
		Pravda 
		Zložitosť prveho O(n*sqrt(n)!) (permutácie)
		Zložitosť druhého O(2^n *sqrt(n)) (choose(n,n/2))
		prv7 algoritmus má nižšiu časovú zložitosť

(2) Ak má jeden program časovú zložitosť O(n^2) a druhý O(n^3), tak na úplne každom vstupe je prvý program rýchlejší ako druhý.
		Nie pri všetkých vstupoch. Ak je vstup 1 tak O(1^2) = O(1^3)

(3) Máme dve polia veľkosti n. V čase O(n log n) sa dá zistiť, či existuje nejaký prvok, ktorý leží v oboch.
		Ano je to pravda . Môžme obä polia sortnúť v O(n log n) a potom dať pointer na začiatok oboch polí a postupne ich prehľadať 

(4) Z hodnoty x vieme hodnotu x^34 získať pomocou menej ako 10 násobení.
		Ano
		We do x*x
		We do x^2*x^2
		we do x^4*x^4
		we od x^8 * x^8
		we do x^16*x^16
		we do x ^32*x^32
		we od x^32+x^2

(5) O usporiadanom poli s n^2 prvkami vieme v čase (log n) zistiť, či obsahuje daný prvok x
	áno , binary search dokáže nájsť daný prvok v poly n^2
	(Pre pole veľkosti n2n2 je počet krokov najviac ⌊log2(n2)⌋+1=⌊2log2n⌋+1⌊log2(n2)⌋+1=⌊2log2n⌋+1, čo je O(logn)O(logn).)

(6) Platí O(log(n^2)) = O(log(n^5)) aj O(log(n)^2) =O(log(n)^5),
		Ano, logaritmicke pravidla hovoria že log(n^k)= k*(log n) takže O(log(n^2)) = O(log(n^5)) 
		ale O(log(n)^2) =O(log(n)^5) neplatí lebo O(log(n)^5) rastie rýchlejšie 

(7) Existuje dátová štruktúra, ktorá umožňuje sledovať stav n countrov, pričom v logaritmickom čase môžeme zmeniť hodnotu jedného countra alebo zistiť súčet countrov v zadanom intervale (i,j).
		Yes, binary index tree

(8) Máme pole s n číslami. V čase O(n) vieme zistiť, či obsahuje permutáciu čísel 0 až n-1.
		Yes, just make an extra bool array and initialize it to false, loop trough numbers, use each num as index in arr and if at the end all values in array are true you have your ansewr if it's permutation  

(9) Algoritmus, ktorý pomocou postupného porovnávania dvojíc prvkov usporiada pole, musí na úplne každom poli dĺžky n vykonať Omega(n log n) porovnaní.
		Nie, porovnávacie triedenia v priemere/horšom prípade potrebujú Ω(n log n) porovnaní, ale nie na každom
		poli – napr. už zoradené pole môže vyžadovať menej porovnaní v niektorých algoritmoch (napr. insertion sort).
(10) Pri použití dynamického programovania vždy dostaneme algoritmus so zložitosťou O(n^2).
		not true , it depends on the implementation so can be O(n) , O(n log n) or whatever we want so it's not every time but only some times

11) Program, ktorý vyskúša všetky možné poradia n prvkov a vyberie najlepšie z nich bude mať časovú zložitosť O(n2^n).
		Nie . Vyskšanie všetkých permutácií je n! takže ak to vynásobíme čas na permutáciu n tak to bude O(n*n!)

12) O(n^2)∩ omega(n log n) = O(n log n)∪ O(n^2).
		nie.
		v lavej strane je prieik takže bude rast najväčšou hodnotou teda n^2
		v pravej strane je zjednotenie teda najrýchlejšie bude rásť najmenšou z nich teda n log n

2 Návrh algoritmu (15 bodov)
Na vstupe je reťazec dĺžky n pozostávajúci z písmen z abecedy veľkosti D (môžete predpokladať, že používame malé písmená anglickej abecedy, takže D= 26). S týmto reťazcom sa dá robiť nasledovná operácia: vyberieme niekolko (jednu alebo viac) pozícií tak, že žiadne dve nie sú susedné. Potom z reťazca vymažeme písmená na vybratých miestach (reťazec sa tým skráti). Úlohou je pre daný reťazec zistiť, koľko najmenej operácií treba, aby všetky písmená vo výslednom reťazci boli rovnaké. Napr. pre reťazec abcdefc je odpoveď 2, lebo napr. v prvom kroku vymažem pozície 0, 3, 5, takže mi ostane bcec a v druhom kroku vymažem pozície 0 a 2 a ostane cc.
Neurónová sieť AlphaCode2 na tento príklad (z anglického zadania) našla riešenie s lineárnym časom. Urobte to rovnako dobre aj vy (a zdôvodnite správnosť a zložitosť). Za bonusové body môžete nájsť riešenie v čase O(nlogn), ktoré funguje pre ľubovoľne velké abecedy (t.j. čas behu nezávisí od D).
		make empty hashmap
		We loop trough the array incrementing every hasmap value by 1
		find the value with max num of elements 
		remaining_elements=len(arr)-max(hashmap)
		make empty list islands
		loop trough array one more time but count the number of spaces between our max letter and next max letter creating islands  
		do while(islands not empty)
				for(island in islands) 
					island-= islands /2 or sum
					if len(island=0) 
						pop island 
					operations++ 
			return the number of operations
		log2(maxGap+1)


3 Analýza algoritmu (15 bodov)
Nájdite tesnú asymptotickú zložitosť v závislosti od n (1<<n znamená 2").

vector<int> a(n, 0); // pole inicializované n nulami
for (int i = 1; i < (1 << n); i++) {
	int j;
	for (j= 0; a[j] == 1; j++) a[j] = 0; a[j] = 1;
	a[j]=1;
}
	vysledok population_count(k⊕(k-1)=2^n

4 Kontrapríklad (15 bodov)
Máme daný graf a n vrcholmi a chceme nájsť najväčšiu nezávislú množinu (t.j. množinu vrcholov, z ktorých žiadne dva nie sú spojené hranou). Máme algoritmus, ktorý používa konštantu D (pevne nastavenú v prog- rame). Ak je n < D, preskúša všetky podmnožiny a overí (táto časť je vždy správna). Ak n ≥ D, pokračuje ako greedy algoritmus, ktorý vždy vyberie vrchol u s najmenším počtom susedov, pridá ho do nezávislej množiny, odstráni z grafu v aj jeho susedov a postup opakuje. Ukážte, že pre žiadne D tento algoritmus nie je správny.
		greedy fails on examples like  {0−1, 0−3, 0−5, 1−2, 2−3, 3−4, 3−5, 4−5 } where greedy can only find 2 while optimal si 3

2. (10 bodov) Máme n vrcholov očíslovaných 1,..., n. Na vstupe je q príkazov, ktoré môžu byť dvoch typov: príkaz '1 u v' pridá hranu medzi u a v, príkaz '2 u v' odoberie hranu (vstup je korektný, t.j. pri '1 u v' hrana medzi u a v neexistuje, pri '2 u v' áno). Po každom príkaze treba vypísať, koľko vrcholov by prežilo, keby sa spustil KO-proces. KO-proces funguje tak, že sa odstránia vrcholy, ktoré majú aspoň jedného suseda a zároveň všetci ich susedia sú väčší. Táto operácia sa opakuje, kým nenastane stabilný stav, a tým KO-proces skončí. Detailne zdôvodnite korektnosť a zložitosť Vášho algoritmu.

3. (10 bodov) Máme pole int a[n]; a funkciu komar, ktorú zavoláme komar (0,n-1).
void komar (int 1, int r) {
	if (1 >= r - 1) {
		if (a[1] > a[r]) swap (a [1], a[r]);
	} else {
		komar (1 + 1, r);
		komar (1, r - 1);
		komar (1 + 1, r); // A
	}
}
a) Napíšte funkciu somar (int 1, int r), ktorá robí to isté, ale je čo najefektívnejšia. Aká je zložitost komar a somar?

b) Ako sa zmení zložitosť komar, ak vyhodíme riadok A? Bude stále robiť to isté?

4. (10 bodov) Máme skupinu n ľudí. Vieme, že presne jeden z nich je špión. Niektorí ľudia niektorých iných ľudí poznajú, pričom poznanie sa nemusí byť symetrické. Špión je ten človek, ktorý pozná všetkých ostatných, ale pritom jeho nepozná nik. Ľuďom vieme klásť otázky: ľubovoľného človeka x sa môžeme opýtať otázku „poznáš človeka y?" a on nám pravdivo odpovie.
Dokážte, že ľubovoľný algoritmus, ktorý pomocou kladenia otázok odhalí špióna, musí vždy položiť aspoň n - 1 otázok.

5. (15 bodov) Hokejový zápas sa skončil 4:1. Vieme len to, že nikdy nebol stav 3:0 ani 0:1. Koľko mohlo byť rôznych priebehov zápasu? Odpoveď je 2: bud dali hostia gól za stavu 1:0, alebo za stavu 2:0.
Budeme riešiť všeobecnú verziu tejto úlohy. Cieľom je zistiť počet možných priebehov zápasu pre dané záverečné skóre d: h, číslo n a polia A[0..n-1] a B[0..n-1]. Pre každé i platí, že stav nikdy nebol A[i]: B[i].

a) Napíšte (ako pseudokód alebo kus programu) rekurzívny algoritmus, ktorý vyskúša a overí všetky možné priebehy zápasu a spočíta, koľko z nich vyhovuje.
b) Pridajte do predchádzajúceho algoritmu memoizáciu tak, aby vznikol algoritmus s časovou zložitosťou polynomiálnou od d, h, n. Odhadnite jeho časovú zložitosť.
c) Uveďte ekvivalentný algoritmus, ktorý túto úlohu rieši (iteratívnc) pomocou dynamického programovania.




TEAP, LS 2021/2022 midterm, 27. 4. 2022
1. Máme veci s velkostami nu-s (ad to veci, tja,>0). Z favej strany odobreieme niekolko (označme si ich počet i) vecí a oxnačíme k ich micet, tj. kr. Zostanú nám veci a,,,1. Z pravej strany odoberieme niekolko (označine si ich početj) veci tak, aby ich súčet bol opaf k. Navrhnite al goritmus, ktorý v čase On logn) (horti nechcem) urei najväčšie k, ktoré takto viene dostať. Napr. pre vstup [7.3, 20,5, 15, 1, 11,8, 10) je odpoved' 30 ( lava odoberieme veci 7,3, 20 a sprava 10, 8, 11, 1). Pre vstup 11,2,4,8, 16) je odpoved 0. Zdovodnite korektnosť a odvod te slokitost.

2. Určite temnú anymptotickú alolitosť (v advislosti od N) každého z nasledovných troch programov
for(;
0; /-2)
for (1-1; 14; 1-2)
for (i=0; i<n;i++)
fort jea; jei; j++)
3. Co rata volanie f(n,n)? Má toto volanie polynomialnu složitost? Preto?
int (int a, int b) (
if (a3) return a bi
if (1) return f(a 1. a);
return (a,1)f(a. b-1);
- 01
for (i=1;i; i+=2) for(j=0; j<; j++)
De formal 2) (4,5) (4/3)-1,1)-(1,4)
}
4. Majme hrací plán, ktorý pozostáva z pola A, ktoré má dĺžku na obsahuje celé (kladné aj záporné) čísla. Na začiatku je robot na poziciii-0, má rychlost v-0 a nairatoef 0. V jednom tahu robot zoierie poličko, na ktorom stojí (tj. zz+All), môže upraviť svoju rýchlosť o najviac +1 ale tak, aby nebola zapomá (tj. v, alebo u±1) a napokon sa posunie o t policok doprava (tj.+v). Cieľom je, aby robot pristál na poslednom políčku a bol čo najviac sairaty. Navrhnite algoritmus, ktorý aisti, kolko najviac sa robot mole naárať. Napríklad pre vstup A=(1,1,-10, 1,-2,-2,10,-100, 1) je výstup 14, lebo najlepie, to robot mo urobiť, jer
000
stojí na začiatku, sożerie Ajo) a zvýši rýchlost
111 na ku prisiel a rýchlosťou 1, soferie [1] a výši rýchl
322
633
stále zrýchľuje
teraz zolerie A16) a spomall
213 nakoniec aoierie posledné poličko
5. (bonusová úloha) Na vstupe je mapa M rozmerov xm, pricom Mills reprezentuje výsku polička v metroch (n,m 1000, 15 M s 10). Can satina bolať v roku 0, kody nič nie je zatopené a potom kaidý rok voda stúpne o meter, tj po prvom roku si zaplavené polička výšky 1, po druhom roku policia výšky s2 atd. Na vstupe d'alej nasleduje cislo T≤ 10 Totok Sla S Str S 10°. Pre kaadd otázku mite vypísať počet ostrovov po te rokoch (as ostrov považujeme silvislý úsek hranou susestiacich polico). Napr. pre vstup:
45
123
13221
12222
5
12345
16 10 16 15 1
je výstup 2 3 1 0 0. Navrhnite to najefektivnejsi algoritamus, dokááte správnosť a odvodte alolitosť
